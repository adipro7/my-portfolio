/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-extended-pdf-viewer.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { NgxExtendedPdfViewerComponent } from './ngx-extended-pdf-viewer.component';
/**
 * @record
 */
export function FindOptions() { }
if (false) {
    /** @type {?|undefined} */
    FindOptions.prototype.highlightAll;
    /** @type {?|undefined} */
    FindOptions.prototype.matchCase;
    /** @type {?|undefined} */
    FindOptions.prototype.wholeWords;
    /** @type {?|undefined} */
    FindOptions.prototype.ignoreAccents;
    /** @type {?|undefined} */
    FindOptions.prototype.findMultipleSearchTexts;
    /** @type {?|undefined} */
    FindOptions.prototype.fuzzySearch;
}
/**
 * @record
 */
function DrawContext() { }
if (false) {
    /** @type {?} */
    DrawContext.prototype.ctx;
    /** @type {?} */
    DrawContext.prototype.canvas;
}
/**
 * @record
 */
export function PDFExportScaleFactor() { }
if (false) {
    /** @type {?|undefined} */
    PDFExportScaleFactor.prototype.width;
    /** @type {?|undefined} */
    PDFExportScaleFactor.prototype.height;
    /** @type {?|undefined} */
    PDFExportScaleFactor.prototype.scale;
}
var NgxExtendedPdfViewerService = /** @class */ (function () {
    function NgxExtendedPdfViewerService() {
    }
    /**
     * @param {?} text
     * @param {?=} options
     * @return {?}
     */
    NgxExtendedPdfViewerService.prototype.findMultiple = /**
     * @param {?} text
     * @param {?=} options
     * @return {?}
     */
    function (text, options) {
        if (options === void 0) { options = {}; }
        options = tslib_1.__assign({}, options, { findMultipleSearchTexts: true });
        /** @type {?} */
        var searchString = text.join('\n') + '\n';
        return this.find(searchString, options);
    };
    /**
     * @param {?} text
     * @param {?=} options
     * @return {?}
     */
    NgxExtendedPdfViewerService.prototype.find = /**
     * @param {?} text
     * @param {?=} options
     * @return {?}
     */
    function (text, options) {
        if (options === void 0) { options = {}; }
        if (!NgxExtendedPdfViewerComponent.ngxExtendedPdfViewerInitialized) {
            // tslint:disable-next-line:quotemark
            console.error("The PDF viewer hasn't finished initializing. Please call find() later.");
            return false;
        }
        else {
            /** @type {?} */
            var highlightAllCheckbox = (/** @type {?} */ (document.getElementById('findHighlightAll')));
            if (highlightAllCheckbox) {
                highlightAllCheckbox.checked = options.highlightAll || false;
            }
            /** @type {?} */
            var matchCaseCheckbox = (/** @type {?} */ (document.getElementById('findMatchCase')));
            if (matchCaseCheckbox) {
                matchCaseCheckbox.checked = options.matchCase || false;
            }
            /** @type {?} */
            var entireWordCheckbox = (/** @type {?} */ (document.getElementById('findEntireWord')));
            if (entireWordCheckbox) {
                entireWordCheckbox.checked = options.wholeWords || false;
            }
            /** @type {?} */
            var findIgnoreAccentsCheckbox = (/** @type {?} */ (document.getElementById('findIgnoreAccents')));
            if (findIgnoreAccentsCheckbox) {
                findIgnoreAccentsCheckbox.checked = options.ignoreAccents || false;
            }
            /** @type {?} */
            var multipleSearchTerms = options.findMultipleSearchTexts || text.includes('\n') || false;
            /** @type {?} */
            var findMultipleSearchTextsCheckbox = (/** @type {?} */ (document.getElementById('findMultipleSearchTexts')));
            if (findMultipleSearchTextsCheckbox) {
                findMultipleSearchTextsCheckbox.checked = multipleSearchTerms;
            }
            /** @type {?} */
            var individualWordsModeCheckbox = (/** @type {?} */ (document.getElementById('individualWordsMode')));
            if (individualWordsModeCheckbox) {
                individualWordsModeCheckbox.checked = false;
            }
            /** @type {?} */
            var fuzzySearchCheckbox = (/** @type {?} */ (document.getElementById('findFuzzy')));
            if (fuzzySearchCheckbox) {
                fuzzySearchCheckbox.checked = options.fuzzySearch || false;
            }
            /** @type {?} */
            var inputField = multipleSearchTerms ? document.getElementById('findInputMultiline') : document.getElementById('findInput');
            if (inputField) {
                if (inputField instanceof HTMLTextAreaElement) {
                    inputField.value = text;
                    // todo dirty hack!
                    inputField.classList.remove('hidden');
                    ((/** @type {?} */ (document.getElementById('findInput')))).classList.add('hidden');
                    ((/** @type {?} */ (document.getElementById('individualWordsModeLabel')))).classList.remove('hidden');
                    ((/** @type {?} */ (document.getElementById('individualWordsMode')))).classList.remove('hidden');
                    // end of the dirty hack
                }
                else if (inputField instanceof HTMLInputElement) {
                    inputField.value = text;
                    // todo dirty hack!
                    inputField.classList.remove('hidden');
                    ((/** @type {?} */ (document.getElementById('findInputMultiline')))).classList.add('hidden');
                    ((/** @type {?} */ (document.getElementById('individualWordsModeLabel')))).classList.add('hidden');
                    ((/** @type {?} */ (document.getElementById('individualWordsMode')))).classList.add('hidden');
                    // end of the dirty hack
                }
                inputField.dispatchEvent(new Event('input'));
                return true;
            }
            else {
                // tslint:disable-next-line:quotemark
                console.error("Unexpected error: the input field used to search isn't part of the DOM.");
                return false;
            }
        }
    };
    /**
     * @return {?}
     */
    NgxExtendedPdfViewerService.prototype.findNext = /**
     * @return {?}
     */
    function () {
        if (!NgxExtendedPdfViewerComponent.ngxExtendedPdfViewerInitialized) {
            // tslint:disable-next-line:quotemark
            console.error("The PDF viewer hasn't finished initializing. Please call findNext() later.");
            return false;
        }
        else {
            /** @type {?} */
            var button = document.getElementById('findNext');
            if (button) {
                button.click();
                return true;
            }
            return false;
        }
    };
    /**
     * @return {?}
     */
    NgxExtendedPdfViewerService.prototype.findPrevious = /**
     * @return {?}
     */
    function () {
        if (!NgxExtendedPdfViewerComponent.ngxExtendedPdfViewerInitialized) {
            // tslint:disable-next-line:quotemark
            console.error("The PDF viewer hasn't finished initializing. Please call findPrevious() later.");
            return false;
        }
        else {
            /** @type {?} */
            var button = document.getElementById('findPrevious');
            if (button) {
                button.click();
                return true;
            }
            return false;
        }
    };
    /**
     * @param {?=} printRange
     * @return {?}
     */
    NgxExtendedPdfViewerService.prototype.print = /**
     * @param {?=} printRange
     * @return {?}
     */
    function (printRange) {
        var _this = this;
        /** @type {?} */
        var PDFViewerApplication = ((/** @type {?} */ (window))).PDFViewerApplication;
        /** @type {?} */
        var alreadyThere = !!window['isInPDFPrintRange'] && !printRange;
        if (!alreadyThere) {
            if (!printRange) {
                printRange = (/** @type {?} */ ({}));
            }
            this.setPrintRange(printRange);
        }
        ((/** @type {?} */ (window))).printPDF();
        if (!alreadyThere) {
            PDFViewerApplication.eventBus.on('afterprint', (/**
             * @return {?}
             */
            function () {
                _this.removePrintRange();
            }));
        }
    };
    /**
     * @return {?}
     */
    NgxExtendedPdfViewerService.prototype.removePrintRange = /**
     * @return {?}
     */
    function () {
        window['isInPDFPrintRange'] = undefined;
        window['filteredPageCount'] = undefined;
    };
    /**
     * @param {?} printRange
     * @return {?}
     */
    NgxExtendedPdfViewerService.prototype.setPrintRange = /**
     * @param {?} printRange
     * @return {?}
     */
    function (printRange) {
        var _this = this;
        /** @type {?} */
        var PDFViewerApplication = ((/** @type {?} */ (window))).PDFViewerApplication;
        window['isInPDFPrintRange'] = (/**
         * @param {?} page
         * @return {?}
         */
        function (page) { return _this.isInPDFPrintRange(page, (/** @type {?} */ (printRange))); });
        window['filteredPageCount'] = this.filteredPageCount(PDFViewerApplication.pagesCount, printRange);
    };
    /**
     * @param {?} pageCount
     * @param {?} range
     * @return {?}
     */
    NgxExtendedPdfViewerService.prototype.filteredPageCount = /**
     * @param {?} pageCount
     * @param {?} range
     * @return {?}
     */
    function (pageCount, range) {
        /** @type {?} */
        var result = 0;
        for (var page = 1; page <= pageCount; page++) {
            if (this.isInPDFPrintRange(page, range)) {
                result++;
            }
        }
        return result;
    };
    /**
     * @param {?} pageIndex
     * @param {?} printRange
     * @return {?}
     */
    NgxExtendedPdfViewerService.prototype.isInPDFPrintRange = /**
     * @param {?} pageIndex
     * @param {?} printRange
     * @return {?}
     */
    function (pageIndex, printRange) {
        /** @type {?} */
        var page = pageIndex + 1;
        if (printRange.from) {
            if (page < printRange.from) {
                return false;
            }
        }
        if (printRange.to) {
            if (page > printRange.to) {
                return false;
            }
        }
        if (printRange.excluded) {
            /** @type {?} */
            var e = (/** @type {?} */ (printRange.excluded));
            if (e.some((/**
             * @param {?} p
             * @return {?}
             */
            function (p) { return p === page; }))) {
                return false;
            }
        }
        if (printRange.included) {
            if (!printRange.included.some((/**
             * @param {?} p
             * @return {?}
             */
            function (p) { return p === page; }))) {
                return false;
            }
        }
        return true;
    };
    /** @deprecated please use getPageAsText(). The preview method will be removed soon. */
    /**
     * @deprecated please use getPageAsText(). The preview method will be removed soon.
     * @param {?} pageNumber
     * @param {?} callback
     * @return {?}
     */
    NgxExtendedPdfViewerService.prototype.getPageAsText_preview = /**
     * @deprecated please use getPageAsText(). The preview method will be removed soon.
     * @param {?} pageNumber
     * @param {?} callback
     * @return {?}
     */
    function (pageNumber, callback) {
        var _this = this;
        /** @type {?} */
        var PDFViewerApplication = ((/** @type {?} */ (window))).PDFViewerApplication;
        /** @type {?} */
        var pdfDocument = PDFViewerApplication.pdfDocument;
        return pdfDocument.getPage(pageNumber).then((/**
         * @param {?} pdfPage
         * @return {?}
         */
        function (pdfPage) {
            /** @type {?} */
            var text = pdfPage.getTextContent();
            text.then((/**
             * @param {?} txt
             * @return {?}
             */
            function (txt) { return callback(_this.convertTextInfoToText(txt)); }));
        }));
    };
    /**
     * @param {?} pageNumber
     * @return {?}
     */
    NgxExtendedPdfViewerService.prototype.getPageAsText = /**
     * @param {?} pageNumber
     * @return {?}
     */
    function (pageNumber) {
        var _this = this;
        /** @type {?} */
        var PDFViewerApplication = ((/** @type {?} */ (window))).PDFViewerApplication;
        /** @type {?} */
        var pdfDocument = PDFViewerApplication.pdfDocument;
        /** @type {?} */
        var pagePromise = pdfDocument.getPage(pageNumber);
        /** @type {?} */
        var extractTextSnippets = (/**
         * @param {?} pdfPage
         * @return {?}
         */
        function (pdfPage) { return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            /** @type {?} */
            var textSnippets = pdfPage.getTextContent();
            resolve(textSnippets);
        })); });
        /** @type {?} */
        var combineTextSnippets = (/**
         * @param {?} textSnippets
         * @return {?}
         */
        function (textSnippets) { return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            /** @type {?} */
            var text = _this.convertTextInfoToText(textSnippets);
            resolve(text);
        })); });
        return pagePromise.then(extractTextSnippets).then(combineTextSnippets);
    };
    /**
     * @private
     * @param {?} textInfo
     * @return {?}
     */
    NgxExtendedPdfViewerService.prototype.convertTextInfoToText = /**
     * @private
     * @param {?} textInfo
     * @return {?}
     */
    function (textInfo) {
        if (!textInfo) {
            return '';
        }
        return textInfo.items.map((/**
         * @param {?} info
         * @return {?}
         */
        function (info) { return info.str; })).join('');
    };
    /** @deprecated please use getPageAsImage(). The preview method will be removed soon. */
    /**
     * @deprecated please use getPageAsImage(). The preview method will be removed soon.
     * @param {?} pageNumber
     * @param {?} scale
     * @param {?} callback
     * @param {?=} errorCallback
     * @return {?}
     */
    NgxExtendedPdfViewerService.prototype.getPageAsImage_preview = /**
     * @deprecated please use getPageAsImage(). The preview method will be removed soon.
     * @param {?} pageNumber
     * @param {?} scale
     * @param {?} callback
     * @param {?=} errorCallback
     * @return {?}
     */
    function (pageNumber, scale, callback, errorCallback) {
        var _this = this;
        /** @type {?} */
        var PDFViewerApplication = ((/** @type {?} */ (window))).PDFViewerApplication;
        /** @type {?} */
        var pdfDocument = PDFViewerApplication.pdfDocument;
        pdfDocument
            .getPage(pageNumber)
            .then((/**
         * @param {?} pdfPage
         * @return {?}
         */
        function (pdfPage) {
            _this.draw_preview(pdfPage, scale, callback, errorCallback);
        }))
            .catch((/**
         * @param {?} reason
         * @return {?}
         */
        function (reason) {
            if (errorCallback) {
                errorCallback({ message: 'Unable to initialize PDF page service', reason: reason });
            }
            else {
                console.error('Unable to initialize PDF page service', reason);
            }
        }));
    };
    /**
     * @param {?} pageNumber
     * @param {?} scale
     * @return {?}
     */
    NgxExtendedPdfViewerService.prototype.getPageAsImage = /**
     * @param {?} pageNumber
     * @param {?} scale
     * @return {?}
     */
    function (pageNumber, scale) {
        var _this = this;
        /** @type {?} */
        var PDFViewerApplication = ((/** @type {?} */ (window))).PDFViewerApplication;
        /** @type {?} */
        var pdfDocument = PDFViewerApplication.pdfDocument;
        /** @type {?} */
        var pagePromise = pdfDocument.getPage(pageNumber);
        /** @type {?} */
        var imagePromise = (/**
         * @param {?} pdfPage
         * @return {?}
         */
        function (pdfPage) { return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            resolve(_this.draw(pdfPage, scale));
        })); });
        return pagePromise.then(imagePromise);
    };
    /**
     * @private
     * @param {?} pdfPage
     * @param {?} scale
     * @return {?}
     */
    NgxExtendedPdfViewerService.prototype.draw = /**
     * @private
     * @param {?} pdfPage
     * @param {?} scale
     * @return {?}
     */
    function (pdfPage, scale) {
        /** @type {?} */
        var zoomFactor = 1;
        if (scale.scale) {
            zoomFactor = scale.scale;
        }
        else if (scale.width) {
            zoomFactor = scale.width / pdfPage.getViewport({ scale: 1 }).width;
        }
        else if (scale.height) {
            zoomFactor = scale.height / pdfPage.getViewport({ scale: 1 }).height;
        }
        /** @type {?} */
        var viewport = pdfPage.getViewport({
            scale: zoomFactor,
        });
        var _a = this.getPageDrawContext(viewport.width, viewport.height), ctx = _a.ctx, canvas = _a.canvas;
        /** @type {?} */
        var drawViewport = viewport.clone();
        /** @type {?} */
        var renderContext = {
            canvasContext: ctx,
            viewport: drawViewport,
        };
        /** @type {?} */
        var renderTask = pdfPage.render(renderContext);
        /** @type {?} */
        var dataUrlPromise = (/**
         * @return {?}
         */
        function () { return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            resolve(canvas.toDataURL());
        })); });
        return renderTask.promise.then(dataUrlPromise);
    };
    /** @deprecated please use draw(). The preview method will be removed soon. */
    /**
     * @deprecated please use draw(). The preview method will be removed soon.
     * @private
     * @param {?} pdfPage
     * @param {?} scale
     * @param {?} callback
     * @param {?=} errorCallback
     * @return {?}
     */
    NgxExtendedPdfViewerService.prototype.draw_preview = /**
     * @deprecated please use draw(). The preview method will be removed soon.
     * @private
     * @param {?} pdfPage
     * @param {?} scale
     * @param {?} callback
     * @param {?=} errorCallback
     * @return {?}
     */
    function (pdfPage, scale, callback, errorCallback) {
        /** @type {?} */
        var zoomFactor = 1;
        if (scale.scale) {
            zoomFactor = scale.scale;
        }
        else if (scale.width) {
            zoomFactor = scale.width / pdfPage.getViewport({ scale: 1 }).width;
        }
        else if (scale.height) {
            zoomFactor = scale.height / pdfPage.getViewport({ scale: 1 }).height;
        }
        /** @type {?} */
        var viewport = pdfPage.getViewport({
            scale: zoomFactor,
        });
        var _a = this.getPageDrawContext(viewport.width, viewport.height), ctx = _a.ctx, canvas = _a.canvas;
        /** @type {?} */
        var drawViewport = viewport.clone();
        /** @type {?} */
        var renderContext = {
            canvasContext: ctx,
            viewport: drawViewport,
        };
        /** @type {?} */
        var renderTask = pdfPage.render(renderContext);
        renderTask.promise.then((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var dataURL = canvas.toDataURL();
            callback(dataURL);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            if (errorCallback) {
                errorCallback(error);
            }
        }));
    };
    /**
     * @private
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    NgxExtendedPdfViewerService.prototype.getPageDrawContext = /**
     * @private
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    function (width, height) {
        /** @type {?} */
        var canvas = (/** @type {?} */ (document.createElement('canvas')));
        /** @type {?} */
        var ctx = canvas.getContext('2d', { alpha: false });
        if (!ctx) {
            // tslint:disable-next-line: quotemark
            throw new Error("Couldn't create the 2d context");
        }
        canvas.width = width;
        canvas.height = height;
        canvas.style.width = width + 'px';
        canvas.style.height = height + 'px';
        return { ctx: ctx, canvas: canvas };
    };
    return NgxExtendedPdfViewerService;
}());
export { NgxExtendedPdfViewerService };
//# sourceMappingURL=data:application/json;base64,